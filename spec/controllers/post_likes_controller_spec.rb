require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::PostLikesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # PostLike. As you add validations to PostLike, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:test_post) { create(:post, author_id: user.id) }
  

  let(:valid_attributes) {
    #skip("Add a hash of attributes valid for your model")
    {
      post_id: test_post.id,
      user_id: user.id
    }
  }

  let(:invalid_attributes) {
    #skip("Add a hash of attributes invalid for your model")
    {
      post_id: nil,
      user_id: user.id
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PostLikesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      PostLike.create! valid_attributes
      get :index, params: { post_id: test_post.id }, session: valid_session, format: :json
      expect(response).to be_successful
      expect(response).to render_template(:index)
    end
  end

  describe "POST #create" do
    before(:each) {
      sign_in user
    }

    context "with valid params" do
      it "creates a new like" do
        expect {
          post :create, params: {post_like: valid_attributes}, session: valid_session, format: :json
        }.to change(PostLike, :count).by(1)
      end

      it "returns the corresponding post_like JSON" do
        post :create, params: {post_like: valid_attributes}, session: valid_session, format: :json
        expect(response).to render_template(:show)
      end
    end

    context "with invalid params" do
      it "return 422" do
        post :create, params: {post_like: invalid_attributes}, session: valid_session, format: :json
        expect(response).to have_http_status(422)
      end
    end
  end


  describe "DELETE #destroy" do
    before(:each) {
      sign_in user
    }

    it "destroys the requested post_like" do
      post_like = PostLike.create! valid_attributes
      expect {
        delete :destroy, params: {id: post_like.to_param}, session: valid_session, format: :json
      }.to change(PostLike, :count).by(-1)
    end

    it "returns the post_like JSON that was just destroyed" do
      post_like = PostLike.create! valid_attributes
      delete :destroy, params: {id: post_like.to_param}, session: valid_session, format: :json
      expect(response.body).to eq(post_like.to_json)
    end
  end

end
