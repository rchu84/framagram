require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::UserFollowsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # UserFollow. As you add validations to UserFollow, be sure to
  # adjust the attributes here as well.
  let(:user1) { create(:user) }
  let(:user2) { create(:user) }
  

  let(:valid_attributes) {
    #skip("Add a hash of attributes valid for your model")
    {
      follower_id: user1.id,
      following_id: user2.id
    }
  }

  let(:invalid_attributes) {
    #skip("Add a hash of attributes invalid for your model")
    {
      follower_id: user1.id,
      following_id: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserFollowsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #following" do
    it "returns a success response and return a list of following" do
      UserFollow.create! valid_attributes
      # render template: "api/user_follows/users"
      get :following, params: { id: user1.id }, session: valid_session, format: :json
      expect(response).to be_successful
      expect(response).to render_template("api/user_follows/users")
    end
  end

  describe "GET #followers" do
    it "returns a success response and return a list of following" do
      UserFollow.create! valid_attributes
      # render template: "api/user_follows/users"
      get :followers, params: { id: user2.id }, session: valid_session, format: :json
      expect(response).to be_successful
      expect(response).to render_template("api/user_follows/users")
    end
  end

  describe "POST #follow" do
    before(:each) {
      sign_in user1
    }

    context "with valid params" do
      it "creates a new following relationship" do
        expect {
          post :follow, params: { id: user1.id, user_id: user2.id }, session: valid_session, format: :json
        }.to change(UserFollow, :count).by(1)
      end

      it "returns the correct JSON" do
        post :follow, params: { id: user1.id, user_id: user2.id }, session: valid_session, format: :json
        expect(response.body).to eq({ follower_id: user1.id, following_id: user2.id }.to_json)
      end
    end

    context "with invalid params" do
      it "return 422" do
        post :follow, params: { id: user1.id, user_id: -1 }, session: valid_session, format: :json
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "POST #unfollow" do
    before(:each) {
      sign_in user1
      user1.follow(user2.id)
    }

    context "with valid params" do
      it "destroys the following relationship" do
        expect {
          post :unfollow, params: { id: user1.id, user_id: user2.id }, session: valid_session, format: :json
        }.to change(UserFollow, :count).by(-1)
      end

      it "returns the correct JSON" do
        post :unfollow, params: { id: user1.id, user_id: user2.id }, session: valid_session, format: :json
        expect(response.body).to eq({ follower_id: user1.id, following_id: user2.id }.to_json)
      end
    end

    context "with invalid params" do
      it "return 422" do
        post :unfollow, params: { id: user1.id, user_id: user1.id }, session: valid_session, format: :json
        expect(response).to have_http_status(422)
      end
    end
  end

end
